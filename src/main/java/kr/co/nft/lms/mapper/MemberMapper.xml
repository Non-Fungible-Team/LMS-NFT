<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.nft.lms.mapper.MemberMapper">

	<!-- 운영자가 보는 목록 뽑기 -->
	
	<select id="selectTeacherTotalCount"
			resultType="int">
		SELECT 
			count(*)		
		FROM teacher
	</select>
	
	<select id="selectTeacherByPage"
			parameterType="java.util.Map"
			resultType="kr.co.nft.lms.vo.Teacher">
		SELECT 
			teacher.member_id memberId 
			, teacher.teacher_entry_date teacherEntryDate 
			, teacher.teacher_name teacherName
			, teacher.teacher_birth teacherBirth
			, teacher.teacher_gender teacherGender 
			, teacher.teacher_email teacherEmail 
			, teacher.address_detail addressDetail <!-- addr_detail로 고쳐야 함 --> 
		FROM teacher
		INNER JOIN member
		ON teacher.member_id = member.member_id 
		ORDER BY member.member_create_date DESC 
		LIMIT #{startRow}, #{rowPerPage} 
	</select>
	
	<select id="selectStudentTotalCount"
			resultType="int">
		SELECT 
			count(*)		
		FROM student
	</select>
	
	<select id="selectStudentByPage"
			parameterType="java.util.Map"
			resultType="kr.co.nft.lms.vo.Student">
		SELECT 
			student.member_id memberId
			, student.student_education studentEducation 
			, student.student_name studentName
			, student.student_birth studentBirth
			, student.student_gender studentGender
			, student.student_email studentEmail
			, student.addr_detail addrDetail
		FROM student
		INNER JOIN member
		ON student.member_id = member.member_id 
		ORDER BY member.member_create_date DESC 
		LIMIT #{startRow}, #{rowPerPage} 
	</select>
	
	<!-- 운영자가 보는 목록 뽑기 -->

	<!-- 목록 뽑기 -->
	
	<select id="selectMemberList"
			resultType="kr.co.nft.lms.vo.Member">
		SELECT
			member_id memberId
			, member_pw memberPw
			, member_pw_update_date memberPwUpdateDate
			, member_phone_no memberPhoneNo
			, member_level memberLevel 
			, member_last_origin_date memberLastOriginDate
			, member_create_date memberCreateDate
			, member_update_date memberUpdateDate 
		FROM member
	</select>

	<select id="selectManagerList"
			resultType="kr.co.nft.lms.vo.Manager">
		SELECT 	
			member_id memberId
			, manager_entry_date managerEntryDate 
			, manager_name managerName
			, manager_birth managerBirth
			, manage_gender managerGender
			, manager_email managerEmail
			, address_detail addressDetail
		FROM manager	
	</select>

	<select id="selectStudentList"
			resultType="kr.co.nft.lms.vo.Student">
		SELECT 	
			member_id memberId
			, student_education studentEducation
			, student_name studentName 
			, student_birth studentBirth
			, student_gender studentGender
			, student_email studentEmail
			, addr_detail addrDetail
		FROM student	
	</select>

	<select id="selectTeacherList"
			resultType="kr.co.nft.lms.vo.Teacher">
		SELECT 	
			member_id memberId
			, teacher_entry_date teacherEntryDate
			, teacher_name teacherName
			, teacher_birth teacherBirth
			, teacher_gender teacherGender
			, teacher_email teacherEmail
			, address_detail addressDetail
		FROM teacher	
	</select>
	
	<!-- 목록 뽑기 -->
	
	<!-- 휴면 처리 -->
	
	<!-- member_level 필드에 들어간 데이터값에 그대로 음수를 씌우는 방법 ? -->
	<update id="updateDormantMember">
		UPDATE member 
		SET member_level = 0-member_level
		WHERE DATEDIFF(NOW(), member_last_login_date > 180)
	</update>
	
	<!-- 휴면 처리 -->
	
	<!-- 탈퇴 처리 -->
	
	<insert id="insertLevelHistoryOfManagerRecord"
			parameterType="kr.co.nft.lms.vo.Member">
		INSERT INTO level_history (
			member_id
			, level_history_new_level
			, level_history_reason
			, member_id2
			, level_history_update_date
		) VALUES (
			#{memberId}
			, -10-#{memberLevel}
			, NULL
			, 'system'
			, NOW() 
		);
	</insert>

	<update id="updateManagerOfMemberTbl"
			parameterType="kr.co.nft.lms.vo.Member">
		UPDATE member SET 
			member_level = -10-#{memberLevel}
		WHERE member_id = #{memberId}	
	</update>
	
	<insert id="insertLevelHistoryOfTeacherRecord"
			parameterType="kr.co.nft.lms.vo.Member">
		INSERT INTO level_history (
			member_id
			, level_history_new_level
			, level_history_reason
			, member_id2
			, level_history_update_date
		) VALUES (
			#{memberId}
			, -10-#{memberLevel}
			, NULL
			, 'system'
			, NOW() 
		);
	</insert>

	<update id="updateTeacherOfMemberTbl"
			parameterType="kr.co.nft.lms.vo.Member">
		UPDATE member SET 
			member_level = -10-#{memberLevel}
		WHERE member_id = #{memberId}	
	</update>
	
	<update id="updateTeacherOfTeacherTbl"
			parameterType="kr.co.nft.lms.vo.Member">
		UPDATE teacher SET 
			member_level = -10-#{memberLevel}
		WHERE member_id = #{memberId}
	</update>
	
	<insert id="insertLevelHistoryOfStudentRecord"
			parameterType="kr.co.nft.lms.vo.Member">
		INSERT INTO level_history (
			member_id
			, level_history_new_level
			, level_history_reason
			, member_id2
			, level_history_update_date
		) VALUES (
			#{memberId}
			, -10-#{memberLevel}
			, NULL
			, 'system'
			, NOW() 
		);
	</insert>

	<update id="updateStudentOfMemberTbl"
			parameterType="kr.co.nft.lms.vo.Member">
		UPDATE member SET 
			member_level = -10-#{memberLevel}
		WHERE member_id = #{memberId}	
	</update>

	<update id="updateStudentOfStudentTbl"
			parameterType="kr.co.nft.lms.vo.Member">
		UPDATE student SET 
			member_level = -10-#{memberLevel}
		WHERE member_id = #{memberId}
	</update>

	<!-- 탈퇴 처리 -->
	
	<!-- 개인 정보 수정 -->
	
	<update id="updatePwHistory"
			parameterType="kr.co.nft.lms.vo.Member"	>
		UPDATE pw_history SET 
			pw_history_date = NOW()
			, pw_history_new_pw = #{memberPw}
		WHERE member_id = #{memberId}
	</update>

	<update id="updateMembePw"
			parameterType="kr.co.nft.lms.vo.Member"	>
		UPDATE member SET
			member_pw = #{memberPw}
			, member_pw_update_date = NOW()
			, member_update_date = NOW()
			<if test="memberLevel lt 0">
				member_level = #{memberLevel}+10
			</if>
		WHERE member_id = #{memberId} 
	</update>

	<select id="selectMemberPhoto"
			parameterType="kr.co.nft.lms.vo.Member"
			resultType="kr.co.nft.lms.vo.MemberPhoto">
		SELECT 
			photo_name photoName
			, photo_origin_name photoOriginName
			, photo_type photoType
			, photo_size photoSize 
			, photo_create_date photoCreateDate
			, photo_update_date photoUpdateDate
		FROM member_photo
		WHERE member_id = #{memberId} 
	</select>
	
	<insert id="insertMemberPhoto"
			parameterType="kr.co.nft.lms.vo.MemberPhoto">
		
		INSERT INTO member_photo (
			member_id
			, photo_name
			, photo_origin_name
			, photo_type
			, photo_size
			, photo_create_date
			, photo_update_date
		) VALUES (
			#{memberId}
			, #{photoName}
			, #{photoOriginName}
			, #{photoType}
			, #{photoSize}
			, NOW()
			, NOW()
		);
	</insert>
	
	<update id="updateManagerByMemberVo"
			parameterType="kr.co.nft.lms.vo.Member">
		UPDATE member SET 
			member_pw = #{memberPw}
			, member_phone_no = #{memberPhoneNo} 
		WHERE member_id = #{memberId} 		
	</update>
	
	<update id="updateManagerByManagerVo"
			parameterType="kr.co.nft.lms.vo.Manager">
		UPDATE manager SET
			manager_name = #{managerName}
			, manager_birth = #{managerBirth}
			, manager_gender = #{managerGender}
			, manager_email = #{managerEmail}
			, manager_entry_date = #{managerEntryDate}
		WHERE member_id = #{memberId} 		
	</update>
	
	<update id="updateTeacherByMemberVo"
			parameterType="kr.co.nft.lms.vo.Member">
		UPDATE member SET 
			member_pw = #{memberPw}
			, member_phone_no = #{memberPhoneNo} 
		WHERE member_id = #{memberId} 		
	</update>
	
	<update id="updateTeacherByTeacherVo"
			parameterType="kr.co.nft.lms.vo.Teacher">
		UPDATE teacher SET
			teacher_name = #{teacherName}
			, teacher_birth = #{teacherBirth}
			, teacher_gender = #{teacherGender}
			, teacher_email = #{teacherEmail}
			, teacher_entry_date = #{teacherEntryDate}
		WHERE member_id = #{memberId} 		
	</update>

	<update id="updateStudentByMemberVo"
			parameterType="kr.co.nft.lms.vo.Member">
		UPDATE member SET 
			member_pw = password(#{memberPw})
			, member_phone_no = #{memberPhoneNo} 
		WHERE member_id = #{memberId} 		
	</update>

	<update id="updateStudentByStudentVo"
			parameterType="kr.co.nft.lms.vo.Student">
		UPDATE student SET 
			student_name = #{studentName}
			, student_birth = #{studentBirth}
			, student_gender = #{studentGender}
			, student_email = #{studentEmail}
			, student_education = #{studentEducation}
		WHERE member_id = #{memberId} 
				
	</update>
	
	<!-- 개인 정보 수정 -->

	<!-- 상세보기 -->
	<!-- Memberid만으로 member테이블 select 하기 -->
	<select id="selectMemberByMemberId"
			parameterType="String"
			resultType="kr.co.nft.lms.vo.Member">
		SELECT 
			member_id memberId
			<!--보안상 괜찮은지 고민 , member_pw memberPw--> 
			,member_pw_update_date memberPwUpdateDate
			,member_phone_no memberPhoneNo
			,member_level memberLevel
			,member_last_login_date memberLastLoginDate
			,member_create_date memberCreateDate
			,member_update_date memberUpdateDate
		FROM member 
		WHERE member_id = #{memberId} 
	</select>
	<!-- 위에 내용 표시 -->	
	
	<select id="selectStudentOne"
			parameterType="kr.co.nft.lms.vo.Member"
			resultType="java.util.Map">
		SELECT 
			member.member_id memberId 
			, member.member_pw_update_date memberPwUpdateDate 
			, member.member_phone_no memberPhoneNo
			, member.member_level memberLevel 
			, member.member_last_login_date memberLastLoginDate 
			, member.member_create_date memberCreateDate 
			, member.member_update_date memberUpdateDate 
			, student.student_education studentEducation 
			, student.student_name studentName
			, student.student_birth studentBirth 
			, student.student_gender studentGender 
			, student.student_email studentEmail 
			, student.addr_detail addrDetail 
			, member_photo.photo_name photoName 
			, member_photo.photo_origin_name photoOriginName 
			, member_photo.photo_type photoType
			, member_photo.photo_size photoSize 
			, member_photo.photo_create_date photoCreateDate 
			, member_photo.photo_update_date photoUpdateDate 
		FROM member 
		INNER JOIN student 
		ON member.member_id = student.member_id
		INNER JOIN member_photo 
		ON member.member_id = member_photo.member_id
		WHERE member.member_id = #{memberId}
	</select>
	
	<select id="selectManagerOneByMemberVo"
			parameterType="kr.co.nft.lms.vo.Member"
			resultType="kr.co.nft.lms.vo.Member">
		SELECT 
			member_id memberId
			, member_phone_no memberPhoneNo
			, member_last_login_date memberLastLoginDate
			, member_pw memberPw 
		FROM member 
		WHERE member_id = #{memberId} 
	</select>
	
	<select id="selectManagerOneByManagerVo"
			parameterType="kr.co.nft.lms.vo.Member"
			resultType="kr.co.nft.lms.vo.Manager">
		SELECT 
			manager_name managerName
			, manager_birth managerBirth
			, manager_gender managerGender
			, manager_email managerEmail 
			, manager_entry_date managerEntryDate
			, addr_detail addrDetail  
		FROM manager 
		WHERE member_id = #{memberId} 
	</select>
	
	<select id="selectTeacherOneByMemberVo"
			parameterType="kr.co.nft.lms.vo.Member"
			resultType="kr.co.nft.lms.vo.Member">
		SELECT 
			member_id memberId
			, member_phone_no memberPhoneNo
			, member_last_login_date memberLastLoginDate
			, member_pw memberPw 
		FROM member 
		WHERE member_id = #{memberId} 
	</select>
	
	<select id="selectTeacherOneByTeacherVo"
			parameterType="kr.co.nft.lms.vo.Member"
			resultType="kr.co.nft.lms.vo.Teacher">
		SELECT 
			teacher_name teacherName
			, teacher_birth teacherBirth
			, teacher_gender teacherGender
			, teacher_email teacherEmail 
			, teacher_entry_date teacherEntryDate
			, addr_detail addrDetail 
		FROM teacher 
		WHERE member_id = #{memberId} 
	</select>

	<select id="selectStudentOneByMemberVo"
			parameterType="kr.co.nft.lms.vo.Member"
			resultType="kr.co.nft.lms.vo.Member">
		SELECT 
			member_id memberId
			, member_phone_no memberPhoneNo
			, member_last_login_date memberLastLoginDate
			<!--  
				, member_pw memberPw
			-->  
		FROM member 
		WHERE member_id = #{memberId} 
	</select>

	<select id="selectStudentOneByStudentVo"
			parameterType="kr.co.nft.lms.vo.Member"
			resultType="kr.co.nft.lms.vo.Student">
		SELECT 
			student_name studentName
			, student_birth studentBirth
			, student_gender studentGender
			, student_email studentEmail 
			, student_education studentEducation 	
			, addr_detail addrDetail 
		FROM student 
		WHERE member_id = #{memberId} 
	</select>
	
	<!-- 상세보기 -->
	
	<!-- 회원 가입 -->	
	
	<insert id="insertManagerByAddManagerDTO"
			parameterType="kr.co.nft.lms.dto.AddManager">
		INSERT INTO manager (
			member_id
			, manager_entry_date
			, manager_name
			, manager_birth
			, manager_gender
			, manager_email 
			, address_detail 
		) VALUES (
			#{memberId}
			, #{managerEntryDate}
			, #{managerName}
			, #{managerBirth}
			, #{managerGender}
			, #{managerEmail}
			, CONCAT(#{roadAddr}, ', ', #{addrDetail})
		)
	</insert>
	
	<insert id="insertTeacherByAddTeacherDTO"
			parameterType="kr.co.nft.lms.dto.AddTeacher">
		INSERT INTO teacher (
			member_id
			, teacher_entry_date
			, teacher_name
			, teacher_birth
			, teacher_gender
			, teacher_email 
			, address_detail 
		) VALUES (
			#{memberId}
			, #{teacherEntryDate}
			, #{teacherName}
			, #{teacherBirth}
			, #{teacherGender}
			, #{teacherEmail}
			, CONCAT(#{roadAddr}, ', ', #{addrDetail})
		)
	</insert>
	
		<insert id="insertStudentByAddStudentDTO"
			parameterType="kr.co.nft.lms.dto.AddStudent">
		INSERT INTO student (
			member_id
			, student_education
			, student_name
			, student_birth
			, student_gender
			, student_email 
			, addr_detail 
		) VALUES (
			#{memberId}
			, #{studentEducation}
			, #{studentName}
			, #{studentBirth}
			, #{studentGender}
			, #{studentEmail}
			, CONCAT(#{roadAddr}, ', ', #{addrDetail})
			<!-- , #{addressDetail} -->
		)
	</insert>
	
	
	<insert id="insertMemberByMemberVo"
			parameterType="kr.co.nft.lms.vo.Member">
			
		INSERT INTO member(
			member_id
			, member_pw
			, member_pw_update_date 
			, member_phone_no
			, member_level
			, member_last_login_date
			, member_create_date
			, member_update_date 
		) VALUES (
			#{memberId}
			, password(#{memberPw})
			, NOW()
			, #{memberPhoneNo}
			, #{memberLevel}
			, NOW()
			, NOW()
			, NOW()
		)
		
	</insert>

				


	
	<insert id="insertAddressByAddressVo"
			parameterType="kr.co.nft.lms.vo.Address">
			
		INSERT INTO address(
			member_id
			, zip_code
			, province
			, city 
			, town
			, roadAddr
			, addr_detail
		) VALUES (
			#{memberId}
			, #{zipCode}
			, #{province}
			, #{city}
			, #{town}
			, #{roadAddr}
			, #{addrDetail}
		)
		
	</insert>

	<!-- 회원 가입  끝-->
	<!-- 비밀번호 변경 이력 테이블 -->	
	<insert id="insertPwHistory"
			parameterType="kr.co.nft.lms.vo.PwHistory">
		INSERT INTO pw_history(
			member_id
			, pw_history_date
			, pw_history_new_pw
		) VALUES (
			#{memberId}
			, #{pwHistoryDate}
			, #{pwHistoryNewPw}
		)
	</insert>
	<!-- 회원 레벨 변경 이력 테이블 -->	
	<insert id="insertLevelHistory"
			parameterType="kr.co.nft.lms.vo.LevelHistory">
		INSERT INTO level_history(
			member_id
			,level_history_update_date
			,level_history_new_level
		<if test="levelHistoryReason != null">
			,level_history_reason
		</if>
			,editor
		) VALUES (
			#{memberId}
			, #{levelHistoryUpdateDate}
			, #{levelHistoryNewLevel}
		<if test="levelHistoryReason != null">
			,#{levelHistoryReason}
		</if>
		,#{editor}
		)
	</insert>
	<!-- 로그인  -->	
	
	<select id="selectMemberOne"
			parameterType="kr.co.nft.lms.vo.Member"
			resultType="kr.co.nft.lms.vo.Member">
		SELECT 
			member_id memberId
			, member_level memberLevel
		FROM member	
		WHERE member_id = #{memberId} and member_pw = password(#{memberPw})
	</select>	
	
	<!-- 로그인 끝  -->	
	
	<!-- 아이디 중복 체크  -->	
	
	<select id="selectIdCheck"
			parameterType="String"
			resultType="int">
		SELECT 
			COUNT(#{memberId})
		FROM member 
		WHERE member_id = #{memberId}
	</select>

	<!-- 아이디 중복 체크  -->	
	
</mapper>